# -*- coding: utf-8 -*-
"""User.behavior.KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qVl583dgR_ZRHJOLLQyCA3IWSZDJWqtQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import seaborn as sns

df=pd.read_csv('/content/user_behavior_dataset.csv')
df

from sklearn import preprocessing
le=preprocessing.LabelEncoder()
df['Gender']=le.fit_transform(df['Gender'])
print(df)

from sklearn import preprocessing
le=preprocessing.LabelEncoder()
df['Operating System']=le.fit_transform(df['Operating System'])
df['Device Model']=le.fit_transform(df['Device Model'])
print(df)

x=df[['Gender','Operating System','Age','Device Model','App Usage Time (min/day)','Battery Drain (mAh/day)','Number of Apps Installed','Data Usage (MB/day)','Screen On Time (hours/day)']].values
y=df['User Behavior Class'].values
print(x,y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)
knn=KNeighborsClassifier(n_neighbors=4)
knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)
#print(y_pred)

accuracy=accuracy_score(y_test,y_pred)
print("Accuracy",accuracy)

precision=precision_score(y_test,y_pred,average='macro')
print("Precision",precision)

f1_score=precision_score(y_test,y_pred,average='micro')
print("F1 Score",f1_score)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)
lr=LogisticRegression()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
acc= accuracy_score(y_test,y_pred)
print("Accuracy",acc)
precision=precision_score(y_test,y_pred,average='weighted')
print("Precision",precision)
f1_score=precision_score(y_test,y_pred,average='micro')
print("F1 Score",f1_score)

cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()